#!/bin/bash
#
# Generated by bootstrap.sh (Claude-assisted).
# If edited by hand, keep this header for attribution.
#
# NOTE: This script sets up the Jira mock and basic Playwright test.
# For the full demo with web app, API server, and traceability tests,
# use the manual setup instructions in README.md.
#

set -Eeuo pipefail

# Global variables
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
JIRA_MOCK_DIR="${SCRIPT_DIR}/external-mocks/jira"
E2E_DIR="${SCRIPT_DIR}/tests/e2e"
JIRA_PID_FILE="/tmp/jira-mock.pid"
JIRA_PORT=8081
JIRA_URL="http://127.0.0.1:${JIRA_PORT}"
STARTED_JIRA=false

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${BLUE}[bootstrap]${NC} $*"
}

warn() {
    echo -e "${YELLOW}[bootstrap]${NC} $*"
}

error() {
    echo -e "${RED}[bootstrap]${NC} $*" >&2
}

success() {
    echo -e "${GREEN}[bootstrap]${NC} $*"
}

cleanup() {
    if [[ "${STARTED_JIRA}" == "true" && -f "${JIRA_PID_FILE}" ]]; then
        local pid
        pid=$(cat "${JIRA_PID_FILE}")
        log "Cleaning up: killing Jira mock (PID: ${pid})"
        kill "${pid}" 2>/dev/null || true
        rm -f "${JIRA_PID_FILE}"
    fi
}

trap cleanup EXIT

preflight_checks() {
    log "Running preflight checks..."
    
    # Print system info
    log "OS: $(uname -s) $(uname -r)"
    
    # Check Node.js
    if ! command -v node >/dev/null 2>&1; then
        error "Node.js not found. Please install Node.js >= 18"
        error "Visit: https://nodejs.org/ or use a version manager like nvm"
        exit 1
    fi
    
    local node_version
    node_version=$(node --version | sed 's/v//')
    log "Node.js version: ${node_version}"
    
    # Check Node version (require >= 18)
    local major_version
    major_version=$(echo "${node_version}" | cut -d. -f1)
    if [[ ${major_version} -lt 18 ]]; then
        error "Node.js version ${node_version} is too old. Please upgrade to >= 18"
        exit 1
    fi
    
    # Check pnpm
    if ! command -v pnpm >/dev/null 2>&1; then
        # Try to enable via corepack
        if command -v corepack >/dev/null 2>&1; then
            log "pnpm not found, attempting to enable via corepack..."
            corepack enable
            if command -v pnpm >/dev/null 2>&1; then
                success "pnpm enabled via corepack"
            else
                error "Failed to enable pnpm via corepack"
                exit 1
            fi
        else
            error "pnpm not found and corepack not available"
            error "Please install pnpm: npm install -g pnpm"
            exit 1
        fi
    fi
    
    local pnpm_version
    pnpm_version=$(pnpm --version)
    log "pnpm version: ${pnpm_version}"
    
    success "Preflight checks passed"
}

setup_jira_mock() {
    log "Setting up Jira mock..."
    
    if [[ ! -d "${JIRA_MOCK_DIR}" ]]; then
        error "Jira mock directory not found: ${JIRA_MOCK_DIR}"
        exit 1
    fi
    
    # Check if mock is already running
    if curl -s "${JIRA_URL}/_admin/requests" >/dev/null 2>&1; then
        warn "Jira mock already running at ${JIRA_URL}"
        return 0
    fi
    
    cd "${JIRA_MOCK_DIR}"
    
    # Install dependencies if node_modules doesn't exist
    if [[ ! -d "node_modules" ]]; then
        log "Installing Jira mock dependencies..."
        npm ci
    fi
    
    # Start the mock server
    log "Starting Jira mock server..."
    nohup node server.mjs > logs/server.log 2>&1 &
    local pid=$!
    echo "${pid}" > "${JIRA_PID_FILE}"
    STARTED_JIRA=true
    
    # Wait for server to be ready (up to 20 seconds)
    log "Waiting for Jira mock to be ready..."
    local attempts=0
    local max_attempts=20
    
    while [[ ${attempts} -lt ${max_attempts} ]]; do
        if curl -s "${JIRA_URL}/_admin/requests" >/dev/null 2>&1; then
            success "Jira mock is ready at ${JIRA_URL}"
            return 0
        fi
        
        sleep 1
        ((attempts++))
        echo -n "."
    done
    
    echo
    error "Jira mock failed to start within ${max_attempts} seconds"
    error "Check logs: ${JIRA_MOCK_DIR}/logs/server.log"
    exit 1
}

setup_playwright() {
    log "Setting up Playwright e2e tests..."
    
    # Create directory structure
    mkdir -p "${E2E_DIR}/tests"
    
    cd "${E2E_DIR}"
    
    # Create package.json if it doesn't exist
    if [[ ! -f "package.json" ]]; then
        log "Creating package.json for e2e tests..."
        cat > package.json << 'EOF'
{
  "name": "e2e-tests",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "test": "playwright test"
  }
}
EOF
    fi
    
    # Install Playwright if not already installed
    if [[ ! -f "node_modules/@playwright/test/package.json" ]]; then
        log "Installing Playwright..."
        pnpm add -D @playwright/test@latest
    fi
    
    # Create playwright.config.ts if it doesn't exist
    if [[ ! -f "playwright.config.ts" || "${FORCE:-}" == "1" ]]; then
        log "Creating Playwright configuration..."
        cat > playwright.config.ts << 'EOF'
//
// Generated by bootstrap.sh (Claude-assisted).
// If edited by hand, keep this header for attribution.
//

import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  testDir: './tests',
  fullyParallel: true,
  forbidOnly: !!process.env.CI,
  retries: process.env.CI ? 2 : 0,
  workers: process.env.CI ? 1 : undefined,
  reporter: [['html', { outputFolder: 'playwright-report' }]],
  use: {
    baseURL: 'http://127.0.0.1:3000',
    trace: 'on-first-retry',
    screenshot: 'only-on-failure',
    video: 'retain-on-failure',
  },

  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },
  ],

  webServer: undefined,
});
EOF
    fi
    
    # Create test file if it doesn't exist
    if [[ ! -f "tests/jira-mock.spec.ts" || "${FORCE:-}" == "1" ]]; then
        log "Creating Jira mock test..."
        cat > tests/jira-mock.spec.ts << 'EOF'
//
// Generated by bootstrap.sh (Claude-assisted).
// If edited by hand, keep this header for attribution.
//

import { test, expect } from '@playwright/test';

const JIRA_BASE_URL = process.env.JIRA_BASE_URL || 'http://127.0.0.1:8081';

function generateRequestId(): string {
  // Use crypto.randomUUID if available, otherwise fallback
  if (typeof crypto !== 'undefined' && crypto.randomUUID) {
    return crypto.randomUUID();
  }
  // Simple fallback UUID v4-like generator
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0;
    const v = c === 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

test('Jira mock API with request correlation', async ({ request }) => {
  const requestId = generateRequestId();
  
  // Reset the mock to clear any previous requests
  await request.post(`${JIRA_BASE_URL}/_admin/reset`);
  
  // Create an issue with x-request-id header
  const createResponse = await request.post(`${JIRA_BASE_URL}/rest/api/3/issue`, {
    headers: {
      'Content-Type': 'application/json',
      'x-request-id': requestId,
    },
    data: {
      fields: {
        project: { key: 'TEST' },
        summary: 'Test issue from bootstrap',
        description: 'This is a test issue created by the bootstrap script',
        issuetype: { name: 'Task' }
      }
    }
  });
  
  // Assert successful creation
  expect(createResponse.status()).toBe(201);
  
  // Verify request was logged with correlation ID
  const adminResponse = await request.get(`${JIRA_BASE_URL}/_admin/requests`);
  expect(adminResponse.status()).toBe(200);
  
  const requests = await adminResponse.json();
  expect(Array.isArray(requests)).toBe(true);
  expect(requests.length).toBeGreaterThan(0);
  
  // Find the issue creation request
  const issueRequest = requests.find((req: any) => 
    req.path === '/rest/api/3/issue' && req.method === 'POST'
  );
  
  expect(issueRequest).toBeDefined();
  expect(issueRequest.headers['x-request-id']).toBe(requestId);
  
  console.log(`âœ“ Request correlation verified with ID: ${requestId}`);
});
EOF
    fi
    
    # Install Playwright browsers
    log "Installing Playwright browsers..."
    pnpm exec playwright install --with-deps
    
    # Run the tests
    log "Running Playwright tests..."
    JIRA_BASE_URL="${JIRA_URL}" pnpm exec playwright test
    
    success "Playwright setup completed"
    log "HTML report available at: ${E2E_DIR}/playwright-report/index.html"
}

print_summary() {
    echo
    success "Bootstrap completed successfully!"
    echo
    log "Summary of actions:"
    echo "  âœ“ Verified Node.js ($(node --version)) and pnpm ($(pnpm --version))"
    echo "  âœ“ Started Jira mock server at ${JIRA_URL}"
    echo "  âœ“ Created Playwright e2e test structure"
    echo "  âœ“ Ran initial Playwright tests"
    echo
    log "Files created/updated:"
    [[ -f "${E2E_DIR}/playwright.config.ts" ]] && echo "  â†’ ${E2E_DIR}/playwright.config.ts"
    [[ -f "${E2E_DIR}/tests/jira-mock.spec.ts" ]] && echo "  â†’ ${E2E_DIR}/tests/jira-mock.spec.ts"
    [[ -f "${E2E_DIR}/package.json" ]] && echo "  â†’ ${E2E_DIR}/package.json"
    echo
    log "Next steps:"
    echo "  â€¢ Open HTML report: open ${E2E_DIR}/playwright-report/index.html"
    echo "  â€¢ Commit new files: git add tests/ && git commit -m 'Add e2e test setup'"
    if [[ "${STARTED_JIRA}" == "true" && -f "${JIRA_PID_FILE}" ]]; then
        local pid
        pid=$(cat "${JIRA_PID_FILE}")
        echo "  â€¢ Stop Jira mock: kill ${pid}"
        echo "  â€¢ Jira mock logs: ${JIRA_MOCK_DIR}/logs/server.log"
    fi
    echo "  â€¢ Re-run tests: cd ${E2E_DIR} && JIRA_BASE_URL=${JIRA_URL} pnpm exec playwright test"
    echo
}

main() {
    log "Starting bootstrap process..."
    
    preflight_checks
    setup_jira_mock
    setup_playwright
    print_summary
    
    success "All done! ðŸš€"
}

# Run main function
main "$@"